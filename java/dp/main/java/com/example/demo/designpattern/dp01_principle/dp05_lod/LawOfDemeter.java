package com.example.demo.designpattern.dp01_principle.dp05_lod;

/**
 * Created by wangshu on 2019/8/7.
 * 迪米特法则(Law of Demeter),又称最少知识法则
 * 迪米特法则（Law of Demeter，LoD）又叫作最少知识原则（Least Knowledge Principle，LKP)，产生于 1987 年美国东北大学
 * （Northeastern University）的一个名为迪米特（Demeter）的研究项目，由伊恩·荷兰（Ian Holland）提出，被 UML 创始者之一
 * 的布奇（Booch）普及，后来又因为在经典著作《程序员修炼之道》（The Pragmatic Programmer）提及而广为人知。
 * 迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。
 * 其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。
 ******************************
 * 在运用迪米特法则时要注意以下 6 点。
 *     在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。
 *     在类的结构设计上，尽量降低类成员的访问权限。
 *     在类的设计上，优先考虑将一个类设置成不变类。
 *     在对其他类的引用上，将引用其他对象的次数降到最低。
 *     不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。
 *     谨慎使用序列化（Serializable）功能。
 * 高内聚、低耦合(外观模式是对迪米特原则典型应用)
 * ******************************************************************
 * 狭义的迪米特法则
 * 如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。
 * 朋友圈的确定
 * “朋友”条件：
 *  1）当前对象本身（this）
 *  2）以参量形式传入到当前对象方法中的对象
 *  3）当前对象的实例变量直接引用的对象
 *  4）当前对象的实例变量如果是一个聚集，那么聚集中的元素也都是朋友
 *  5）当前对象所创建的对象
 * 狭义的迪米特法则的缺点：
 *    在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的业务逻辑无关。
 *    遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。
 *    但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。
 *    门面模式和调停者模式（中介者模式）实际上就是迪米特法则的应用。
 * 广义的迪米特法则在类的设计上的体现：
 *     优先考虑将一个类设置成不变类。
 *     尽量降低一个类的访问权限。
 *     谨慎使用Serializable。
 *     尽量降低成员的访问权限。
 */
public class LawOfDemeter {
}
class A{
    private String name;
    //setter/setter...
}
class B{
    private A a;
    private C c;
    public void meeting(){//A与C的通信通过B来完成，而不是直接由A或C来调用
        System.out.println(a+"--->"+c);
        //...
    }
    //getter/setter...
}
class C{
    private String name;
    //setter/getter...
}


